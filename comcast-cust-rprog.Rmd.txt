---
title: "Comcast-cust-rprog"
author: "Shiietal Palshetkar"
date: "14/07/2023"
output:
  pdf_document: default
  word_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r}

#Importing necessary packages
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(tidyverse)
#Importing Comcast Dataset
comcast_data <- read_csv("/home/labsuser/Projects/Comcast Telecom Complaints data.csv")
View(comcast_data)

```


```{r}

#Manipulating Field Names
names(comcast_data)<-gsub(pattern = '\\.',replacement = "",x=names(comcast_data))
names(comcast_data)
View(comcast_data)

#From the dataset, we can see that the format of Date column is not same throughout, so we need to make it same for analysis.

#Processing Date
comcast_data$Date<- dmy(comcast_data$Date)
View(comcast_data)

#Now we need to get the complaints on a daily level basis and plot a trend chart for it.

ans<-comcast_data %>% group_by(Date) %>% summarize(NumOfComplaints=n())

#Plotting for daily granularity level
ggplot(data = ans,aes(as.POSIXct(Date),NumOfComplaints))+
  geom_line()+
  geom_point(size = 1)+
  scale_x_datetime(breaks = "1 weeks",date_labels = "%d/%m")+
  labs(title = "Daily Ticket Count",x= "Days",y ="No. of Tickets")+
  theme(axis.text.x = element_text(angle = 75),
        plot.title = element_text(hjust = 0.5))

#INSIGHTS:- From the above trend chart, we can clearly see that complaints for the month of June are maximum i.e.1046.
```








```{r}
#Now we need to make a frequency table basis the complaint types.

# Complaint Type Processing
network_tickets<- contains(comcast_data$`Customer Complaint`,match = 'network',ignore.case = T)
internet_tickets<- contains(comcast_data$`Customer Complaint`,match = 'internet',ignore.case = T)
billing_tickets<- contains(comcast_data$`Customer Complaint`,match = 'bill',ignore.case = T)
email_tickets<- contains(comcast_data$`Customer Complaint`,match = 'email',ignore.case = T)
charges_ticket<- contains(comcast_data$`Customer Complaint`,match = 'charge',ignore.case = T)



comcast_data$ComplaintType[internet_tickets]<- "Internet"
comcast_data$ComplaintType[network_tickets]<- "Network"
comcast_data$ComplaintType[billing_tickets]<- "Billing"
comcast_data$ComplaintType[email_tickets]<- "Email"
comcast_data$ComplaintType[charges_ticket]<- "Charges"
comcast_data$ComplaintType[-c(internet_tickets,network_tickets,
                              billing_tickets,charges_ticket,email_tickets)]<- "Others"
table(comcast_data$ComplaintType)
View(comcast_data)

#INSIGHTS:- From the above table we can see that the Internet type complaints are maximum.
```
```{r}
#Now we need to make a new categorical variable for Complaint Status.

open_complaints<-(comcast_data$Status == 'Open' | comcast_data$Status == 'Pending')
closed_complaints<-(comcast_data$Status == 'Closed' | comcast_data$Status == 'Solved')
comcast_data$ComplaintStatus[open_complaints]<-'Open'
comcast_data$ComplaintStatus[closed_complaints]<-'Closed'

# Now we need to plot state wise status of complaints in a stacked bar chart.

stack<-table(comcast_data$ComplaintStatus,comcast_data$State)
stack
comcast_data<- group_by(comcast_data,State,ComplaintStatus)
chart_data<- summarise(comcast_data,Count = n())

#Plotting on stacked bar chart
ggplot(as.data.frame(chart_data), mapping = aes(State, Count)) +
  geom_col(aes(fill = ComplaintStatus), width = 0.95) +
  theme(
    axis.text.x = element_text(angle = 90),
    axis.title.y = element_text(size = 15),
    axis.title.x = element_text(size = 15),
    title = element_text(size = 16, colour = "#0073C2FF"),
    plot.title = element_text(hjust = 0.5)
  ) +
  labs(
    title = "Ticket Status Stacked Bar Chart",
    x = "States",
    y = "No of Tickets",
    fill = "Status"
  )

#INSIGHTS:- From the above chart, we can clearly see that Georgia has maximum complaints.
```
```{r}
#Now we need to see which state has maximum unresolved complaints

comcast_data %>% filter(ComplaintStatus=='Open') %>% group_by(State) %>% summarize(NumOfComplaints=n()) %>% arrange(desc(NumOfComplaints))

#INSIGHTS:- From the table generated above we can see that Georgia has maximum unresolved complaints i.e. 80.
```
```{r}
#Now we want to see the percentage of resolved complaints.

tot<-comcast_data %>% group_by(ComplaintStatus) %>% summarize(NumOfComplaints=n())
tot
slices<-tot$NumOfComplaints
pct<-round((slices/sum(slices)*100),2)
pct
lbls<-paste(tot$ComplaintStatus," ",pct,"%",sep="")

#Plotting pie chart
pie(slices,labels=lbls)

#INSIGHTS:- From the above pie chart we can clearly see that there are total 76.75% Complaints resolved.
```

```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.

